#Область ПрограммныйИнтерфейс

// Запускает проверку кода и формирует результат проверки.
//
// Параметры:
//  ПараметрыПроверки  - Структура - См. ПараметрыПроверки().
//	АдресРезультата - Строка - Адрес во временном хранилище, куда будет помещен результат выполнения.
//
Процедура ПроверитьКод(ПараметрыПроверки, АдресРезультата) Экспорт
	
	ВыполнитьПроверкуКода(ПараметрыПроверки);
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибки", ПараметрыПроверки.Ошибки); 
	Результат.Вставить("КоличествоОшибок", ПараметрыПроверки.КоличествоОшибок); 
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);	
	
КонецПроцедуры

// Функция-конструктор для параметров проверки кода.
//
// Возвращаемое значение:
//   Структура   - Данные ошибки.
//     * ТекстМодуля - Строка - Содержит текст модуля.
//     * ТипОбъекта - ПеречислениеСсылка.ТипыОбъектов - Тип объекта метаданных.
//     * Свойства - Структура - Свойства объекта.
//     * Требования - Массив - Содержит массив требований.
//     * СоставМодулей - Массив - Состав модулей.
//
Функция ПараметрыПроверки() Экспорт
	
	ПараметрыПроверки = Новый Структура;
	
	СоставМодулей = Новый Массив;
	СоставМодулей.Добавить(Перечисления.ИдентификаторыСодержанияОбъектов.Модуль);
	
	ПараметрыПроверки.Вставить("СоставМодулей", СоставМодулей);
	ПараметрыПроверки.Вставить("ТипОбъекта", 	Перечисления.ТипыОбъектов.ПустаяСсылка());
	ПараметрыПроверки.Вставить("Требования", 	Новый Массив);
	ПараметрыПроверки.Вставить("ТекстМодуля", 	"");
	ПараметрыПроверки.Вставить("Свойства", 		Новый Структура);

	Возврат ПараметрыПроверки;
	
КонецФункции

// Возвращает список типов объектов метаданных для проверки.
//
// Возвращаемое значение:
//   СписокЗначений   - Список типов объектов.
//
Функция ТипыОбъектовДляПроверки() Экспорт

	Модули = Новый СписокЗначений;
	
	Модули.Добавить(Перечисления.ТипыОбъектов.Конфигурация, 	"Модуль обычного приложения");
	Модули.Добавить(Перечисления.ТипыОбъектов.Конфигурация, 	"Модуль управляемого приложения");
	Модули.Добавить(Перечисления.ТипыОбъектов.Конфигурация, 	"Модуль внешнего соединения");
	Модули.Добавить(Перечисления.ТипыОбъектов.Конфигурация,		"Модуль сеанса");
	Модули.Добавить(Перечисления.ТипыОбъектов.ОбщийМодуль, 		"Общий модуль");
	Модули.Добавить(Перечисления.ТипыОбъектов.УправляемаяФорма,	"Модуль управляемой формы");
	Модули.Добавить(Перечисления.ТипыОбъектов.Форма, 			"Модуль обычной формы");
	Модули.Добавить(Перечисления.ТипыОбъектов.Команда, 			"Модуль команды");
	Модули.Добавить(Перечисления.ТипыОбъектов.Справочник, 		"Модуль объекта");
	Модули.Добавить(Перечисления.ТипыОбъектов.Справочник, 		"Модуль менеджера");
	Модули.Добавить(Перечисления.ТипыОбъектов.РегистрСведений, 	"Модуль набора записей");
	
	Возврат Модули;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает коллекцию регистрируемых ошибок.
//
// Параметры:
//  Требования  - Массив - Требования, по которым необходимо вернуть ошибки.
//
// Возвращаемое значение:
//   Соответствие   - Соответствие регистрируемых ошибкок.
//		* Ключ - СправочникСсылка.ОбнаруживаемыеОшибки.
//
Функция РегистрируемыеОшибки(Требования)

	РегистрируемыеОшибки = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Требования", Требования);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТребованияРеализацияТребования.ПравилоПроверки КАК ПравилоПроверки
		|ПОМЕСТИТЬ ВтПравила
		|ИЗ
		|	Справочник.Требования.РеализацияТребования КАК ТребованияРеализацияТребования
		|ГДЕ
		|	ТребованияРеализацияТребования.Ссылка В(&Требования)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПравилаОбнаруживаемыеОшибки.Ошибка КАК Ошибка
		|ИЗ
		|	ВтПравила КАК ВтПравила
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Правила.ОбнаруживаемыеОшибки КАК ПравилаОбнаруживаемыеОшибки
		|		ПО ВтПравила.ПравилоПроверки = ПравилаОбнаруживаемыеОшибки.Ссылка";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		РегистрируемыеОшибки.Вставить(Выборка.Ошибка, Истина);
	КонецЦикла; 
	
	Возврат РегистрируемыеОшибки;
	
КонецФункции

Процедура ВыполнитьПроверкуКода(Параметры)

	РегистрируемыеОшибки = РегистрируемыеОшибки(Параметры.Требования);
	
	// Инициализируем ядро для проверки.
	Ядро = Обработки.ЯдроПроверкиКода.Создать();
	Ядро.УстановитьРегистрациюВТаблицу();
	Ядро.УстановитьМаксимальноеКоличествоОшибокОдногоВида(10000);
	Ядро.СоответствиеРегистрируемыхОшибок = РегистрируемыеОшибки;
	Ядро.Переопределяемый_ЗаполнитьТаблицуИсключенийИзПроверки();
	
	Ядро.ПараметрыПроверкиКода = Параметры;
	Ядро.ЭтоПроверкаКода = Истина;
	Ядро.УстановитьКонтекстМодуля();
	Ядро.УстановитьКонтекстРасширения(Неопределено);
	
	Ядро.ПроверитьКод();
	
	Ядро.ЗавершитьПроверку();
	ДанныеОшибок = Ядро.ПолучитьНайденныеОшибки();
	СоответствиеПроверенныхОбъектовИПравил = Ядро.СоответствиеПроверенныхОбъектовИПравил;
	СоответствиеОшибок = Ядро.ПолучитьСоответствиеОбнаруженныхОшибокИИхКоличества();
	Ядро = Неопределено;

	Параметры.Вставить("ОшибкиПоСтрокам", ДанныеОшибок.ОшибкиПоСтрокам); 	
	Параметры.Вставить("КоличествоОшибок", ДанныеОшибок.КоличествоОшибок); 	
	Параметры.Вставить("Ошибки", ДанныеОшибок.Ошибки); 	

КонецПроцедуры

#КонецОбласти