
#Область ПрограммныйИнтерфейс

// Возвращает таблицу блоков переданного типа модуля объекта конфигурации.
// Если проверяемый объект не имеет указанного типа модуля, то возвращается "Неопределено".
//
// Параметры:
//   ИмяМодуля          - ПеречислениеСсылка.ИдентификаторыСодержанияОбъектов  - тип модуля объекта.
//   ОбъектКонфигурации - СправочникСсылка.СтруктураКонфигурации, Неопределено - ссылка на объект.
//                        Если не заполнен, то возвращается текст модуля текущего проверяемого объекта.
//
// Возвращаемое значение:
//   Неопределено, ТаблицаЗначений - таблица блоков модуля объекта с колонками:
//     Блок            - ПеречислениеСсылка.ТипыБлоковМодулей - тип блока модуля.
//     НачальнаяСтрока - Число                                - номер строки начала блока.
//     КонечнаяСтрока  - Число                                - номер строки окончания блока.
//     ЕстьКомментарий - Булево                               - флаг наличия комментария в блоке.
//     ЕстьЭкспорт     - Булево                               - флаг наличия экспорта в блоке,
//                                                              актуально для заголовков процедур и функций.
//     Текст           - Строка                               - многострочный текст блока.
//
Функция ПолучитьТаблицуБлоковМодуля(Знач ТекстМодуля) Экспорт
	
	ТипыБлоков = Перечисления.ТипыБлоковМодулей;
	
	ТаблицаБлоков = Новый ТаблицаЗначений;
	ТаблицаБлоков.Колонки.Добавить("Блок");
	ТаблицаБлоков.Колонки.Добавить("НачальнаяСтрока");
	ТаблицаБлоков.Колонки.Добавить("КонечнаяСтрока");
	ТаблицаБлоков.Колонки.Добавить("ЕстьКомментарий");
	ТаблицаБлоков.Колонки.Добавить("ЕстьЭкспорт");
	ТаблицаБлоков.Колонки.Добавить("ДирективаКомпиляции");
	ТаблицаБлоков.Колонки.Добавить("Текст");
	
	Текст = Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(ТекстМодуля);
	ВсегоСтрокМодуля = Текст.КоличествоСтрок();
	
	// Разбиваем текст модуля на блоки.
	ТекущийБлок = Неопределено;
	НачальнаяСтрока = 1;
	КонечнаяСтрока = 1;
	ЭтоКонецБлока = Истина;
	ЕстьЭкспорт = Неопределено;
	ЕстьКомментарий = Ложь;
	ДирективаКомпиляции = "";
	
	Для НомерСтроки = 1 По ВсегоСтрокМодуля Цикл
		
		СтрокаМодуляИсходная = Текст.ПолучитьСтроку(НомерСтроки);
		СтрокаМодуля = СокрЛП(СтрокаМодуляИсходная);
		СтрокаМодуля = ВРег(СтрокаМодуля);
		
		// Встретился случай неправильного определения процедуры:
		// ПроцедураПроверки  = Обработчик.ПроцедураПроверки;
		// Замена происходит для правильного определения блока, в функцию СтрНачинаетсяС() добавлены пробелы в строку поиска.
		
		// Для случаев "КонецФункции" и "КонецПроцедуры" пробелы не добавляем.
		// Встретился случай неправильного определения окончания функции:
		// КонецФункции// СформироватьЗапросПроверкиПриСменеСтатуса();
		
		СтрокаМодуля = СтрЗаменить(СтрокаМодуля, Символы.Таб, " ") + " ";
		
		Если НЕ ЭтоКонецБлока Тогда
			НовыйБлок = ТекущийБлок;
			Если НовыйБлок = ТипыБлоков.ОписаниеПеременной Тогда
				ЭтоКонецБлока = (СтрНайти(СтрокаМодуля, ";") > 0);
			ИначеЕсли НовыйБлок = ТипыБлоков.ЗаголовокПроцедуры
				  ИЛИ НовыйБлок = ТипыБлоков.ЗаголовокФункции Тогда
				
				ПозицияСкобки = (СтрНайти(СтрокаМодуля, ")") > 0);
				ЭтоКонецБлока = (ПозицияСкобки > 0);
				ЕстьЭкспорт = Ложь;
				Если ЭтоКонецБлока Тогда
					ПозицияКомментария = СтрНайти(СтрокаМодуля, "//", , ПозицияСкобки);
					Если ПозицияКомментария > 0 Тогда
						СтрокаМодуля = СокрП(Лев(СтрокаМодуля, ПозицияКомментария - 1));
					КонецЕсли;
					ЕстьЭкспорт = (СтрНайти(СтрокаМодуля, "ЭКСПОРТ", , ПозицияСкобки) > 0);
				КонецЕсли;
			Иначе
				ЭтоКонецБлока = Истина;
			КонецЕсли;
		ИначеЕсли СтрНачинаетсяС(СтрокаМодуля, "//") Тогда
			НовыйБлок = ТипыБлоков.Комментарий;
			ЭтоКонецБлока = Истина;
		ИначеЕсли СтрНачинаетсяС(СтрокаМодуля, "ПЕРЕМ ") Тогда
			НовыйБлок = ТипыБлоков.ОписаниеПеременной;
			ЭтоКонецБлока = (СтрНайти(СтрокаМодуля, ";") > 0);
		ИначеЕсли СтрНачинаетсяС(СтрокаМодуля, "ПРОЦЕДУРА ") Тогда
			НовыйБлок = ТипыБлоков.ЗаголовокПроцедуры;
			ЕстьЭкспорт = Ложь;
			
			ПозицияСкобки = СтрНайти(СтрокаМодуля, ")");
			ЭтоКонецБлока = ПозицияСкобки > 0;
			Если ЭтоКонецБлока Тогда
				ПозицияКомментария = СтрНайти(СтрокаМодуля, "//", , ПозицияСкобки);
				Если ПозицияКомментария > 0 Тогда
					СтрокаМодуля = СокрП(Лев(СтрокаМодуля, ПозицияКомментария - 1));
				КонецЕсли;
				ЕстьЭкспорт = СтрНайти(СтрокаМодуля, "ЭКСПОРТ", , ПозицияСкобки) > 0;
			КонецЕсли;
		ИначеЕсли СтрНачинаетсяС(СтрокаМодуля, "КОНЕЦПРОЦЕДУРЫ") Тогда // пробел не добавляем (см. выше)
			НовыйБлок = ТипыБлоков.ОкончаниеПроцедуры;
			ЭтоКонецБлока = Истина;
		ИначеЕсли СтрНачинаетсяС(СтрокаМодуля, "ФУНКЦИЯ ") Тогда
			НовыйБлок = ТипыБлоков.ЗаголовокФункции;
			ЕстьЭкспорт = Ложь;
			
			ПозицияСкобки = СтрНайти(СтрокаМодуля, ")");
			ЭтоКонецБлока = ПозицияСкобки > 0;
			Если ЭтоКонецБлока Тогда
				ПозицияКомментария = СтрНайти(СтрокаМодуля, "//", , ПозицияСкобки);
				Если ПозицияКомментария > 0 Тогда
					СтрокаМодуля = СокрП(Лев(СтрокаМодуля, ПозицияКомментария - 1));
				КонецЕсли;
				ЕстьЭкспорт = (СтрНайти(СтрокаМодуля, "ЭКСПОРТ", , ПозицияСкобки) > 0);
			КонецЕсли;
		ИначеЕсли СтрНачинаетсяС(СтрокаМодуля, "КОНЕЦФУНКЦИИ") Тогда // пробел не добавляем (см. выше)
			НовыйБлок = ТипыБлоков.ОкончаниеФункции;
			ЭтоКонецБлока = Истина;
		Иначе
			НовыйБлок = ТипыБлоков.Операторы;
			ЭтоКонецБлока = Истина;
			
			Если СтрНачинаетсяС(СтрокаМодуля, "&") Тогда
				ДирективаКомпиляции = СтрокаМодуляИсходная;
			КонецЕсли;
		КонецЕсли;
		
		Если НовыйБлок = ТекущийБлок Тогда
			ЕстьКомментарий = (ЕстьКомментарий ИЛИ (СтрНайти(СтрокаМодуля, "//") > 0));
			КонечнаяСтрока = КонечнаяСтрока + 1;
		Иначе
			
			Если ЗначениеЗаполнено(ТекущийБлок) Тогда
				
				НоваяЗаписьОБлоке = ТаблицаБлоков.Добавить();
				НоваяЗаписьОБлоке.Блок = ТекущийБлок;
				НоваяЗаписьОБлоке.ЕстьКомментарий = ЕстьКомментарий;
				НоваяЗаписьОБлоке.НачальнаяСтрока = НачальнаяСтрока;
				НоваяЗаписьОБлоке.КонечнаяСтрока  = КонечнаяСтрока;
				
				ЭтоМетод = (ТекущийБлок = ТипыБлоков.ЗаголовокПроцедуры) ИЛИ (ТекущийБлок = ТипыБлоков.ЗаголовокФункции);
				Если ЭтоМетод Тогда
					НоваяЗаписьОБлоке.ЕстьЭкспорт = ЕстьЭкспорт;
				КонецЕсли;
				
				ЭтоПеременная = (ТекущийБлок = ТипыБлоков.ОписаниеПеременной);
				Если ЭтоМетод ИЛИ ЭтоПеременная Тогда
					НоваяЗаписьОБлоке.ДирективаКомпиляции = ДирективаКомпиляции;
					ДирективаКомпиляции = "";
				КонецЕсли;
				
			КонецЕсли;
			
			НачальнаяСтрока = НомерСтроки;
			КонечнаяСтрока  = НомерСтроки;
			ТекущийБлок = НовыйБлок;
			ЕстьКомментарий = (СтрНайти(СтрокаМодуляИсходная, "//") > 0);
			
		КонецЕсли;
		
		Если НомерСтроки = ВсегоСтрокМодуля Тогда
			
			НоваяЗаписьОБлоке = ТаблицаБлоков.Добавить();
			НоваяЗаписьОБлоке.Блок = ТекущийБлок;
			НоваяЗаписьОБлоке.ЕстьКомментарий = ЕстьКомментарий;
			НоваяЗаписьОБлоке.НачальнаяСтрока = НачальнаяСтрока;
			НоваяЗаписьОБлоке.КонечнаяСтрока  = КонечнаяСтрока;
			
			ЭтоМетод = (ТекущийБлок = ТипыБлоков.ЗаголовокПроцедуры) ИЛИ (ТекущийБлок = ТипыБлоков.ЗаголовокФункции);
			Если ЭтоМетод Тогда
				НоваяЗаписьОБлоке.ЕстьЭкспорт = ЕстьЭкспорт;
			КонецЕсли;
			
			ЭтоПеременная = (ТекущийБлок = ТипыБлоков.ОписаниеПеременной);
			Если ЭтоМетод ИЛИ ЭтоПеременная Тогда
				НоваяЗаписьОБлоке.ДирективаКомпиляции = ДирективаКомпиляции;
				ДирективаКомпиляции = "";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполняем структуру модуля текстом.
	РазборТекста = Новый ТекстовыйДокумент;
	РазборТекста.УстановитьТекст(ТекстМодуля);
	
	Для Каждого СтрокаБлока Из ТаблицаБлоков Цикл
		
		ТекстБлока = Новый ТекстовыйДокумент;
		
		Для Счетчик = СтрокаБлока.НачальнаяСтрока По СтрокаБлока.КонечнаяСтрока Цикл
			ТекстБлока.ДобавитьСтроку(РазборТекста.ПолучитьСтроку(Счетчик));
		КонецЦикла;
		
		СтрокаБлока.Текст = ТекстБлока.ПолучитьТекст();
		
	КонецЦикла;
	
	Возврат ТаблицаБлоков;
	
КонецФункции

#КонецОбласти